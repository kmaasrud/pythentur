{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pythentur Pythentur makes retrieving public transport data from Entur dead simple. Installation Install using pip pip install pythentur or clone the GitHub repository and install locally. Quickstart Here's how to get data about the first incoming transport from platform H of the stop place Majorstuen: >>> from pythentur import StopPlace >>> header = '<company> - <application>' >>> majorstuen = StopPlace.from_string('Majorstuen', header) >>> majorstuen['G'][0] { 'line': '46', 'destination': 'Ullerntoppen', 'aimed': datetime.datetime(2020, 3, 10, 12, 48, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), 'expected': datetime.datetime(2020, 3, 10, 12, 48, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), 'delay': datetime.timedelta(0), 'readableTime': '2 minutes' } Entur requires every user of its API to identify themselves through a header. Just pass the name of your company and application (in the format shown above) to the constructor. Every platform of a stop place is accessed through their name, or - in the case of the platform not having a name - through their NSR (National Stop Register) quay ID. Every platform can be listed like this: >>> majorstuen.platforms [NSR:Quay:8079, NSR:Quay:8027, NSR:Quay:102023, NSR:Quay:8066, NSR:Quay:8089, NSR:Quay:8042, NSR:Quay:8028, NSR:Quay:8050, NSR:Quay:8051, NSR:Quay:104056, NSR:Quay:8076, NSR:Quay:8058, NSR:Quay:8067] This isn't too easy to decode, obviously, but a quick check on Entur should show you which platforms are on each stop in a more human-friendly manner. The transport calls from each platform are accessed through the corresponding index, and are always up to date when you access them. For example, accessing the first element of Majorstuen platform 1 twice always gives me the result at that specific time. >>> majorstuen['1'][0]['destination'] 'Ellingsrud\u00e5sen' >>> majorstuen['1'][0]['destination'] 'Mortensrud' For the time being, the list of calls is limited to 20 elements. This should however suffice for most cases.","title":"Introduction"},{"location":"#welcome-to-pythentur","text":"Pythentur makes retrieving public transport data from Entur dead simple.","title":"Welcome to Pythentur"},{"location":"#installation","text":"Install using pip pip install pythentur or clone the GitHub repository and install locally.","title":"Installation"},{"location":"#quickstart","text":"Here's how to get data about the first incoming transport from platform H of the stop place Majorstuen: >>> from pythentur import StopPlace >>> header = '<company> - <application>' >>> majorstuen = StopPlace.from_string('Majorstuen', header) >>> majorstuen['G'][0] { 'line': '46', 'destination': 'Ullerntoppen', 'aimed': datetime.datetime(2020, 3, 10, 12, 48, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), 'expected': datetime.datetime(2020, 3, 10, 12, 48, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), 'delay': datetime.timedelta(0), 'readableTime': '2 minutes' } Entur requires every user of its API to identify themselves through a header. Just pass the name of your company and application (in the format shown above) to the constructor. Every platform of a stop place is accessed through their name, or - in the case of the platform not having a name - through their NSR (National Stop Register) quay ID. Every platform can be listed like this: >>> majorstuen.platforms [NSR:Quay:8079, NSR:Quay:8027, NSR:Quay:102023, NSR:Quay:8066, NSR:Quay:8089, NSR:Quay:8042, NSR:Quay:8028, NSR:Quay:8050, NSR:Quay:8051, NSR:Quay:104056, NSR:Quay:8076, NSR:Quay:8058, NSR:Quay:8067] This isn't too easy to decode, obviously, but a quick check on Entur should show you which platforms are on each stop in a more human-friendly manner. The transport calls from each platform are accessed through the corresponding index, and are always up to date when you access them. For example, accessing the first element of Majorstuen platform 1 twice always gives me the result at that specific time. >>> majorstuen['1'][0]['destination'] 'Ellingsrud\u00e5sen' >>> majorstuen['1'][0]['destination'] 'Mortensrud' For the time being, the list of calls is limited to 20 elements. This should however suffice for most cases.","title":"Quickstart"},{"location":"userguide/getting-to-know/","text":"Getting to know the object types Location Constructing Attributes StopPlace Every stop place in the National Stop Register (NSR) can become a Python-friendly StopPlace . Every StopPlace contains a number of Platforms , which are the main interface to fetch transport data. Info StopPlace is a subclass of Location and does thus contain geographic data like coordinates and locality. This is further explained in The Location Object . Constructing To construct a StopPlace , you need the NSR stop place ID and Entur's required \"ET-Client-Name\" header. The NSR ID is easily found by searching for the requested stop place on Entur's travel planner and checking the URL. An alternative is using from_string to construct the class instead. The header is required by Entur to identify any users of their API. Omitting this deploys rate-limiting, and is therefore not supported by this package. The format of the header should be \"company - application\" . As an example, from pythentur import StopPlace oslo_s = StopPlace( 'NSR:StopPlace:59872', header = 'foo_company - bar_app' ) would make oslo_s a StopPlace object for Oslo Central Station. Info For larger stop places with many platforms, initializing a StopPlace might take a few seconds, since the API is queried for each platform. However, when the StopPlace is loaded in memory, the operations should be quite snappy. Using from_string To avoid having to look up the NSR ID of a stop place, an alternative way of constructing a StopPlace is supplied. from_string takes a searchstring and the \"ET-Client-Name\" header as parameters, and returns the first stop place matching that string. from pythentur import StopPlace nationaltheatret = StopPlace.from_string( 'nationaltheatret', header = 'foo_company - bar_app' ) Attributes Attribute Description name The name of the stop place. id The NSR ID of the stop place. platforms List of all the stop place's platforms. Each of these platforms are a Platform object, and can be accessed with their name or id as a key. zones A list of the tariff zones the stop place is a part of. In addition, StopPlace contains all of the attributes of the Location class. Platform","title":"Getting to know the object types"},{"location":"userguide/getting-to-know/#getting-to-know-the-object-types","text":"","title":"Getting to know the object types"},{"location":"userguide/getting-to-know/#location","text":"","title":"Location"},{"location":"userguide/getting-to-know/#constructing","text":"","title":"Constructing"},{"location":"userguide/getting-to-know/#attributes","text":"","title":"Attributes"},{"location":"userguide/getting-to-know/#stopplace","text":"Every stop place in the National Stop Register (NSR) can become a Python-friendly StopPlace . Every StopPlace contains a number of Platforms , which are the main interface to fetch transport data. Info StopPlace is a subclass of Location and does thus contain geographic data like coordinates and locality. This is further explained in The Location Object .","title":"StopPlace"},{"location":"userguide/getting-to-know/#constructing_1","text":"To construct a StopPlace , you need the NSR stop place ID and Entur's required \"ET-Client-Name\" header. The NSR ID is easily found by searching for the requested stop place on Entur's travel planner and checking the URL. An alternative is using from_string to construct the class instead. The header is required by Entur to identify any users of their API. Omitting this deploys rate-limiting, and is therefore not supported by this package. The format of the header should be \"company - application\" . As an example, from pythentur import StopPlace oslo_s = StopPlace( 'NSR:StopPlace:59872', header = 'foo_company - bar_app' ) would make oslo_s a StopPlace object for Oslo Central Station. Info For larger stop places with many platforms, initializing a StopPlace might take a few seconds, since the API is queried for each platform. However, when the StopPlace is loaded in memory, the operations should be quite snappy.","title":"Constructing"},{"location":"userguide/getting-to-know/#using-from_string","text":"To avoid having to look up the NSR ID of a stop place, an alternative way of constructing a StopPlace is supplied. from_string takes a searchstring and the \"ET-Client-Name\" header as parameters, and returns the first stop place matching that string. from pythentur import StopPlace nationaltheatret = StopPlace.from_string( 'nationaltheatret', header = 'foo_company - bar_app' )","title":"Using from_string"},{"location":"userguide/getting-to-know/#attributes_1","text":"Attribute Description name The name of the stop place. id The NSR ID of the stop place. platforms List of all the stop place's platforms. Each of these platforms are a Platform object, and can be accessed with their name or id as a key. zones A list of the tariff zones the stop place is a part of. In addition, StopPlace contains all of the attributes of the Location class.","title":"Attributes"},{"location":"userguide/getting-to-know/#platform","text":"","title":"Platform"},{"location":"userguide/usage/","text":"Usage Accessing platforms of a stop place and all their transport calls requires knowing its identifier. This identifier can be either the platform name or its NSR ID. To get a well formatted list of the available platforms and their associated ID, you may use the all_platforms method. >>> oslo_s.all_platforms() {'1': 'NSR:Quay:565', '10': 'NSR:Quay:551', '11': 'NSR:Quay:571', '13': 'NSR:Quay:557', '15': 'NSR:Quay:563', '16': 'NSR:Quay:562', '17': 'NSR:Quay:564', '18': 'NSR:Quay:567', '19': 'NSR:Quay:556', '3': 'NSR:Quay:554', '4': 'NSR:Quay:566', '5': 'NSR:Quay:559', '6': 'NSR:Quay:550', '7': 'NSR:Quay:553', '8': 'NSR:Quay:561', '9': 'NSR:Quay:555'} From","title":"Usage"},{"location":"userguide/usage/#usage","text":"Accessing platforms of a stop place and all their transport calls requires knowing its identifier. This identifier can be either the platform name or its NSR ID. To get a well formatted list of the available platforms and their associated ID, you may use the all_platforms method. >>> oslo_s.all_platforms() {'1': 'NSR:Quay:565', '10': 'NSR:Quay:551', '11': 'NSR:Quay:571', '13': 'NSR:Quay:557', '15': 'NSR:Quay:563', '16': 'NSR:Quay:562', '17': 'NSR:Quay:564', '18': 'NSR:Quay:567', '19': 'NSR:Quay:556', '3': 'NSR:Quay:554', '4': 'NSR:Quay:566', '5': 'NSR:Quay:559', '6': 'NSR:Quay:550', '7': 'NSR:Quay:553', '8': 'NSR:Quay:561', '9': 'NSR:Quay:555'} From","title":"Usage"}]}